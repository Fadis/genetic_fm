#ifndef TINYFM3_MIDI_PLAYER_HPP
#define TINYFM3_MIDI_PLAYER_HPP

#include <array>

#include "common.hpp"
#include "channel_state.hpp"

namespace tinyfm3 {
  constexpr const std::array< std::pair< scale_t, std::array< float, 70u > >, 4u > c = {{ // piano
    std::pair< scale_t, std::array< float, 70u > >( 0, std::array< float, 70u >{{
    0.9796082,0.027333,3.1014066e-04,0.3553782,0.0,0.0,0.999701,0.0,0.0,0.0952946,0.0019682,0.0344333,0.1222082,1.0472875,0.1374503,0.0018104,0.0621257,0.5214623,0.4422576,0.0798205,0.0,0.0,1.0054471,0.0,0.0,0.5863671,0.9928878,0.9980734,3.9977785,0.0306404,0.0639717,0.0039026,0.4017407,0.1531342,0.0185301,0.1214061,0.0,2.0,0.2660897,0.0,0.0,0.7332967,0.9828789,0.5512452,1.4921884,2.5392514,0.8627927,0.0123824,0.318959,0.6230813,0.1354245,0.5086474,0.0,1.0,1.0056306,0.0,0.0,0.2150809,0.155934,0.0171293,0.2404514,3.9270459,0.2475623,0.0172155,0.0608255,0.3450612,0.2006269,0.0601531,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 24, std::array< float, 70u >{{
    0.0175172,0.7432367,0.9942004,0.5013386,0.0,0.0,0.063371,0.0,0.0,0.9983152,0.9986114,0.9932348,3.995443,3.957628,0.0530628,0.0267793,0.0303522,0.4592281,0.3059861,0.0055584,0.0,0.0,0.9979768,0.0,0.0,0.0014267,0.2512943,0.1932171,0.678896,3.9600422,0.2492587,0.0088596,0.0127475,0.0405101,0.3525194,0.6405403,0.0,0.0,2.0133302,0.0,0.0,0.0916744,1.5013455e-04,0.0038255,1.0729848,1.2459275,0.1655984,0.0196416,0.388317,3.6136403e-05,0.0735318,0.3796615,0.0,0.0,1.0074307,0.0,0.0,0.7539373,0.9476098,0.1820611,3.0318112,3.9955108,0.9764988,0.0263692,4.1351466e-04,0.1624742,0.3848921,0.1254972,0.0,2.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 46, std::array< float, 70u >{{
    0.0457435,0.8906088,0.0129413,0.0337375,0.0,0.0,0.9999506,0.0,0.0,0.5019313,0.2985598,0.4476275,0.7814351,0.983387,0.6375829,0.0021691,0.1068607,0.4594058,0.1003668,3.3462548e-05,0.0,0.0,0.999908,0.0,0.0,0.0937499,0.0017416,4.9320121e-04,7.3263979e-04,0.9352115,0.8186398,0.0051615,0.0018527,0.1244988,6.693687e-04,0.5396459,0.0,0.0,7.2088437,0.0,0.0,0.1386457,0.0328117,0.0325027,0.0454824,0.0982079,0.8850954,0.0029559,0.0608163,0.4569201,0.1454468,0.5722334,0.0,1.0,1.0044711,0.0,0.0,0.9997975,0.997558,0.9994992,3.9967332,1.9420777e-04,0.0319168,9.4391279e-04,0.2792196,0.5002316,0.2370799,0.1997924,0.0,2.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 56, std::array< float, 70u >{{
    0.0625198,0.0018706,8.6669092e-04,0.4896812,0.0,0.0,1.0042784,0.0,0.0,0.524102,0.519513,0.4864989,1.879072,3.9961641,0.7496531,0.006336,0.0524706,0.0144911,0.0836465,0.5167552,0.0,0.0,0.1460345,0.0,0.0,0.7463137,0.1475809,0.0341697,1.5376066,3.9863234,0.6385647,0.0017813,0.26735,0.1124071,0.5583759,0.3408181,0.0,1.0,0.9999016,0.0,0.0,0.9988876,0.9997439,0.995975,3.9987581,1.7351069,0.0059812,0.0067124,4.9563451e-04,0.3350334,0.0111717,0.3564779,0.0,2.0,1.0040377,0.0,0.0,0.0880434,2.4644263e-04,0.1274491,0.4533838,2.8325513,0.1159366,0.0075558,0.3490002,0.0626333,0.229382,0.0499572,0.0,0.0
    }}),
  }};
  /*constexpr const std::array< std::pair< scale_t, std::array< float, 70u > >, 4u > c = {{ // flute
    std::pair< scale_t, std::array< float, 70u > >( 0, std::array< float, 70u >{{
    0.1168954,0.2132837,0.0084067,0.4663886,0.0,0.0,6.9991231,0.0,0.0,0.484728,0.9619582,0.9779768,1.351324,2.4148421,0.8743257,0.0051881,0.007966,0.177731,0.0390689,0.4419008,0.0,0.0,0.9945633,0.0,0.0,0.5275398,0.1273479,0.8211968,2.8347233,2.6445041,0.2480353,0.0656607,0.0130324,0.1407643,0.0194684,0.4934016,0.0,0.0,0.0725295,0.0,0.0,0.8334098,0.1643202,0.1819223,1.2149947,0.0559442,0.244168,0.0041863,0.0166408,0.5031434,0.1608294,0.0665142,0.0,2.0,1.0002497,0.0,0.0,0.0307255,0.3107349,0.0391794,0.3402896,0.8157668,0.141558,0.0232443,0.0492228,0.088524,0.6541813,0.1570041,0.0,2.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 24, std::array< float, 70u >{{
    0.1168954,0.2132837,0.0084067,0.4663886,0.0,0.0,6.9991231,0.0,0.0,0.484728,0.9619582,0.9779768,1.351324,2.4148421,0.8743257,0.0051881,0.007966,0.177731,0.0390689,0.4419008,0.0,0.0,0.9945633,0.0,0.0,0.5275398,0.1273479,0.8211968,2.8347233,2.6445041,0.2480353,0.0656607,0.0130324,0.1407643,0.0194684,0.4934016,0.0,0.0,0.0725295,0.0,0.0,0.8334098,0.1643202,0.1819223,1.2149947,0.0559442,0.244168,0.0041863,0.0166408,0.5031434,0.1608294,0.0665142,0.0,2.0,1.0002497,0.0,0.0,0.0307255,0.3107349,0.0391794,0.3402896,0.8157668,0.141558,0.0232443,0.0492228,0.088524,0.6541813,0.1570041,0.0,2.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 46, std::array< float, 70u >{{
    0.1168954,0.2132837,0.0084067,0.4663886,0.0,0.0,6.9991231,0.0,0.0,0.484728,0.9619582,0.9779768,1.351324,2.4148421,0.8743257,0.0051881,0.007966,0.177731,0.0390689,0.4419008,0.0,0.0,0.9945633,0.0,0.0,0.5275398,0.1273479,0.8211968,2.8347233,2.6445041,0.2480353,0.0656607,0.0130324,0.1407643,0.0194684,0.4934016,0.0,0.0,0.0725295,0.0,0.0,0.8334098,0.1643202,0.1819223,1.2149947,0.0559442,0.244168,0.0041863,0.0166408,0.5031434,0.1608294,0.0665142,0.0,2.0,1.0002497,0.0,0.0,0.0307255,0.3107349,0.0391794,0.3402896,0.8157668,0.141558,0.0232443,0.0492228,0.088524,0.6541813,0.1570041,0.0,2.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 56, std::array< float, 70u >{{
    0.1168954,0.2132837,0.0084067,0.4663886,0.0,0.0,6.9991231,0.0,0.0,0.484728,0.9619582,0.9779768,1.351324,2.4148421,0.8743257,0.0051881,0.007966,0.177731,0.0390689,0.4419008,0.0,0.0,0.9945633,0.0,0.0,0.5275398,0.1273479,0.8211968,2.8347233,2.6445041,0.2480353,0.0656607,0.0130324,0.1407643,0.0194684,0.4934016,0.0,0.0,0.0725295,0.0,0.0,0.8334098,0.1643202,0.1819223,1.2149947,0.0559442,0.244168,0.0041863,0.0166408,0.5031434,0.1608294,0.0665142,0.0,2.0,1.0002497,0.0,0.0,0.0307255,0.3107349,0.0391794,0.3402896,0.8157668,0.141558,0.0232443,0.0492228,0.088524,0.6541813,0.1570041,0.0,2.0
    }}),
  }};*/
  /*constexpr const std::array< std::pair< scale_t, std::array< float, 70u > >, 4u > c = {{ // sax
    std::pair< scale_t, std::array< float, 70u > >( 0, std::array< float, 70u >{{
    0.9328429,0.8538197,0.7242009,0.2690642,0.0,0.0,1.0056603,0.0,0.0,0.0550066,0.0649804,0.0073508,0.498857,3.2914088,0.2321219,6.6006217e-04,0.0697871,0.1189392,0.6043054,0.5065366,0.0,0.0,0.9770563,0.0,0.0,0.0037743,0.7390605,0.0664677,0.6225139,1.2328158,0.134234,7.2613931e-04,0.5131107,0.1462516,0.3749028,0.0676758,0.0,2.0,0.9935447,0.0,0.0,0.881771,0.718648,0.0618,2.2363613,0.5102071,0.4865128,0.0052925,0.5919539,0.2290126,0.1851995,0.0479438,0.0,0.0,6.0044475,0.0,0.0,0.5004497,0.9440104,0.2860362,1.483286,0.3810496,0.3362,0.0048333,0.4016036,0.3344317,0.2294707,0.092889,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 24, std::array< float, 70u >{{
    0.9328429,0.8538197,0.7242009,0.2690642,0.0,0.0,1.0056603,0.0,0.0,0.0550066,0.0649804,0.0073508,0.498857,3.2914088,0.2321219,6.6006217e-04,0.0697871,0.1189392,0.6043054,0.5065366,0.0,0.0,0.9770563,0.0,0.0,0.0037743,0.7390605,0.0664677,0.6225139,1.2328158,0.134234,7.2613931e-04,0.5131107,0.1462516,0.3749028,0.0676758,0.0,2.0,0.9935447,0.0,0.0,0.881771,0.718648,0.0618,2.2363613,0.5102071,0.4865128,0.0052925,0.5919539,0.2290126,0.1851995,0.0479438,0.0,0.0,6.0044475,0.0,0.0,0.5004497,0.9440104,0.2860362,1.483286,0.3810496,0.3362,0.0048333,0.4016036,0.3344317,0.2294707,0.092889,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 46, std::array< float, 70u >{{
    0.9328429,0.8538197,0.7242009,0.2690642,0.0,0.0,1.0056603,0.0,0.0,0.0550066,0.0649804,0.0073508,0.498857,3.2914088,0.2321219,6.6006217e-04,0.0697871,0.1189392,0.6043054,0.5065366,0.0,0.0,0.9770563,0.0,0.0,0.0037743,0.7390605,0.0664677,0.6225139,1.2328158,0.134234,7.2613931e-04,0.5131107,0.1462516,0.3749028,0.0676758,0.0,2.0,0.9935447,0.0,0.0,0.881771,0.718648,0.0618,2.2363613,0.5102071,0.4865128,0.0052925,0.5919539,0.2290126,0.1851995,0.0479438,0.0,0.0,6.0044475,0.0,0.0,0.5004497,0.9440104,0.2860362,1.483286,0.3810496,0.3362,0.0048333,0.4016036,0.3344317,0.2294707,0.092889,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 56, std::array< float, 70u >{{
    0.1168954,0.2132837,0.0084067,0.4663886,0.0,0.0,6.9991231,0.0,0.0,0.484728,0.9619582,0.9779768,1.351324,2.4148421,0.8743257,0.0051881,0.007966,0.177731,0.0390689,0.4419008,0.0,0.0,0.9945633,0.0,0.0,0.5275398,0.1273479,0.8211968,2.8347233,2.6445041,0.2480353,0.0656607,0.0130324,0.1407643,0.0194684,0.4934016,0.0,0.0,0.0725295,0.0,0.0,0.8334098,0.1643202,0.1819223,1.2149947,0.0559442,0.244168,0.0041863,0.0166408,0.5031434,0.1608294,0.0665142,0.0,2.0,1.0002497,0.0,0.0,0.0307255,0.3107349,0.0391794,0.3402896,0.8157668,0.141558,0.0232443,0.0492228,0.088524,0.6541813,0.1570041,0.0,2.0
    }}),
  }};*/
  /*constexpr const std::array< std::pair< scale_t, std::array< float, 70u > >, 4u > c = {{ // sax
    std::pair< scale_t, std::array< float, 70u > >( 0, std::array< float, 70u >{{
    0.4216546,0.1212956,0.6251474,0.0355303,0.0,0.0,2.0009143,0.0,0.0,0.9376816,0.7885537,0.8021104,0.0799536,1.009608,0.504786,7.8947564e-04,0.1035099,0.2570088,0.3547814,0.0418369,0.0,2.0,0.9604822,0.0,0.0,0.2500203,0.1476873,0.2499185,0.9759344,3.9991172,0.3735427,0.0039078,0.3985599,0.0808181,0.334493,0.1096741,0.0,2.0,1.000464,0.0,0.0,0.0602029,0.0580613,0.2497305,3.7361272,0.498357,0.8438292,1.8155973e-04,0.477324,0.053947,0.1353841,1.1638913e-05,0.0,0.0,1.0276068,0.0,0.0,0.9952287,0.7170551,0.9903607,0.2263864,2.5941947,0.191021,0.0044942,0.003513,0.4499821,0.1958185,0.0173531,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 24, std::array< float, 70u >{{
    0.4216546,0.1212956,0.6251474,0.0355303,0.0,0.0,2.0009143,0.0,0.0,0.9376816,0.7885537,0.8021104,0.0799536,1.009608,0.504786,7.8947564e-04,0.1035099,0.2570088,0.3547814,0.0418369,0.0,2.0,0.9604822,0.0,0.0,0.2500203,0.1476873,0.2499185,0.9759344,3.9991172,0.3735427,0.0039078,0.3985599,0.0808181,0.334493,0.1096741,0.0,2.0,1.000464,0.0,0.0,0.0602029,0.0580613,0.2497305,3.7361272,0.498357,0.8438292,1.8155973e-04,0.477324,0.053947,0.1353841,1.1638913e-05,0.0,0.0,1.0276068,0.0,0.0,0.9952287,0.7170551,0.9903607,0.2263864,2.5941947,0.191021,0.0044942,0.003513,0.4499821,0.1958185,0.0173531,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 46, std::array< float, 70u >{{
    0.4216546,0.1212956,0.6251474,0.0355303,0.0,0.0,2.0009143,0.0,0.0,0.9376816,0.7885537,0.8021104,0.0799536,1.009608,0.504786,7.8947564e-04,0.1035099,0.2570088,0.3547814,0.0418369,0.0,2.0,0.9604822,0.0,0.0,0.2500203,0.1476873,0.2499185,0.9759344,3.9991172,0.3735427,0.0039078,0.3985599,0.0808181,0.334493,0.1096741,0.0,2.0,1.000464,0.0,0.0,0.0602029,0.0580613,0.2497305,3.7361272,0.498357,0.8438292,1.8155973e-04,0.477324,0.053947,0.1353841,1.1638913e-05,0.0,0.0,1.0276068,0.0,0.0,0.9952287,0.7170551,0.9903607,0.2263864,2.5941947,0.191021,0.0044942,0.003513,0.4499821,0.1958185,0.0173531,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 56, std::array< float, 70u >{{
    0.4216546,0.1212956,0.6251474,0.0355303,0.0,0.0,2.0009143,0.0,0.0,0.9376816,0.7885537,0.8021104,0.0799536,1.009608,0.504786,7.8947564e-04,0.1035099,0.2570088,0.3547814,0.0418369,0.0,2.0,0.9604822,0.0,0.0,0.2500203,0.1476873,0.2499185,0.9759344,3.9991172,0.3735427,0.0039078,0.3985599,0.0808181,0.334493,0.1096741,0.0,2.0,1.000464,0.0,0.0,0.0602029,0.0580613,0.2497305,3.7361272,0.498357,0.8438292,1.8155973e-04,0.477324,0.053947,0.1353841,1.1638913e-05,0.0,0.0,1.0276068,0.0,0.0,0.9952287,0.7170551,0.9903607,0.2263864,2.5941947,0.191021,0.0044942,0.003513,0.4499821,0.1958185,0.0173531,0.0,0.0
    }}),
  }};*/
  /*constexpr const std::array< std::pair< scale_t, std::array< float, 70u > >, 4u > c = {{ // trumpet
    std::pair< scale_t, std::array< float, 70u > >( 0, std::array< float, 70u >{{
    3.6733947e-04,0.5000005,0.0193676,0.9995524,0.0,0.0,0.9870859,0.0,0.0,0.0242156,0.0937703,0.1080389,0.1809416,2.0529192,0.0973084,0.0366796,3.4086752e-04,0.3818867,0.0532365,0.2312026,0.0,0.0,2.0203946,0.0,0.0,0.0029184,0.2220689,0.2478872,0.5484038,2.5336325,0.0856086,0.017258,0.0416035,0.1377621,0.2497798,0.5831927,0.0,2.0,1.0062379,0.0,0.0,0.257539,0.8111796,0.9990354,3.9846619,1.4418336,0.4833565,0.0394828,0.4044398,0.2017308,0.0604715,2.4597118e-05,0.0,0.0,3.0132253,0.0,0.0,0.750072,0.5160305,0.9996132,3.9954184,1.9150111,0.3688805,0.0385708,0.5170729,0.3331326,0.1302443,0.1128909,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 24, std::array< float, 70u >{{
    3.6733947e-04,0.5000005,0.0193676,0.9995524,0.0,0.0,0.9870859,0.0,0.0,0.0242156,0.0937703,0.1080389,0.1809416,2.0529192,0.0973084,0.0366796,3.4086752e-04,0.3818867,0.0532365,0.2312026,0.0,0.0,2.0203946,0.0,0.0,0.0029184,0.2220689,0.2478872,0.5484038,2.5336325,0.0856086,0.017258,0.0416035,0.1377621,0.2497798,0.5831927,0.0,2.0,1.0062379,0.0,0.0,0.257539,0.8111796,0.9990354,3.9846619,1.4418336,0.4833565,0.0394828,0.4044398,0.2017308,0.0604715,2.4597118e-05,0.0,0.0,3.0132253,0.0,0.0,0.750072,0.5160305,0.9996132,3.9954184,1.9150111,0.3688805,0.0385708,0.5170729,0.3331326,0.1302443,0.1128909,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 46, std::array< float, 70u >{{
    3.6733947e-04,0.5000005,0.0193676,0.9995524,0.0,0.0,0.9870859,0.0,0.0,0.0242156,0.0937703,0.1080389,0.1809416,2.0529192,0.0973084,0.0366796,3.4086752e-04,0.3818867,0.0532365,0.2312026,0.0,0.0,2.0203946,0.0,0.0,0.0029184,0.2220689,0.2478872,0.5484038,2.5336325,0.0856086,0.017258,0.0416035,0.1377621,0.2497798,0.5831927,0.0,2.0,1.0062379,0.0,0.0,0.257539,0.8111796,0.9990354,3.9846619,1.4418336,0.4833565,0.0394828,0.4044398,0.2017308,0.0604715,2.4597118e-05,0.0,0.0,3.0132253,0.0,0.0,0.750072,0.5160305,0.9996132,3.9954184,1.9150111,0.3688805,0.0385708,0.5170729,0.3331326,0.1302443,0.1128909,0.0,0.0
    }}),
    std::pair< scale_t, std::array< float, 70u > >( 56, std::array< float, 70u >{{
    3.6733947e-04,0.5000005,0.0193676,0.9995524,0.0,0.0,0.9870859,0.0,0.0,0.0242156,0.0937703,0.1080389,0.1809416,2.0529192,0.0973084,0.0366796,3.4086752e-04,0.3818867,0.0532365,0.2312026,0.0,0.0,2.0203946,0.0,0.0,0.0029184,0.2220689,0.2478872,0.5484038,2.5336325,0.0856086,0.017258,0.0416035,0.1377621,0.2497798,0.5831927,0.0,2.0,1.0062379,0.0,0.0,0.257539,0.8111796,0.9990354,3.9846619,1.4418336,0.4833565,0.0394828,0.4044398,0.2017308,0.0604715,2.4597118e-05,0.0,0.0,3.0132253,0.0,0.0,0.750072,0.5160305,0.9996132,3.9954184,1.9150111,0.3688805,0.0385708,0.5170729,0.3331326,0.1302443,0.1128909,0.0,0.0
    }}),
  }};*/
  class midi_player {
  public:
    midi_player() :
      channels{{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }} {
        for( auto &program: programs ) {
          program[ 0 ].first = c[ 0 ].first;
          program[ 1 ].first = c[ 1 ].first;
          program[ 2 ].first = c[ 2 ].first;
          program[ 3 ].first = c[ 3 ].first;
          program[ 0 ].second.reset( c[ 0 ].second.begin(), c[ 0 ].second.end() );
          program[ 1 ].second.reset( c[ 1 ].second.begin(), c[ 1 ].second.end() );
          program[ 2 ].second.reset( c[ 2 ].second.begin(), c[ 2 ].second.end() );
          program[ 3 ].second.reset( c[ 3 ].second.begin(), c[ 3 ].second.end() );
        }
      }
    bool event( uint8_t v ) {
      if( v < 0x80 ) return (this->*state)( v );
      else return new_event( v );
    }
    template< typename Iterator >
    void operator()( Iterator begin, Iterator end ) {
      for( Iterator cur = begin; cur != end; ++cur,++mapper )
        *cur = int16_t( mapper() * 32767.f );
    }
  private:
    bool waiting_for_event( uint8_t ) { return true; }
    bool note_off_key_number( uint8_t v ) { 
      message_buffer[ 0 ] = v;
      state = &midi_player::note_off_velocity;
      return false;
    }
    bool note_off_velocity( uint8_t ) {
      mapper.note_off( channel, scale_t( message_buffer[ 0 ] ) );
      state = &midi_player::note_off_key_number;
      return true;
    }
    bool note_on_key_number( uint8_t v ) { 
      message_buffer[ 0 ] = v;
      state = &midi_player::note_on_velocity;
      return false;
    }
    fm_config *bisect( channel_t channel, scale_t scale ) {
      auto &program = programs[ channel ];
      if( program[ 2 ].first > scale ) {
        if( program[ 1 ].first > scale ) return &program[ 0 ].second;
        else return &program[ 1 ].second;
      }
      else {
        if( program[ 3 ].first > scale ) return &program[ 2 ].second;
        else return &program[ 3 ].second;
      }
    }
    bool note_on_velocity( uint8_t v ) {
      if( channel != 10 ) {
        const scale_t scale = scale_t( message_buffer[ 0 ] );
        const auto prog = bisect( channel, scale );
        mapper.note_on( scale, velocity_t( v ), prog, &channels[ channel ] );
      }
      state = &midi_player::note_on_key_number;
      return true;
    }
    bool polyphonic_key_pressure_key_number( uint8_t ) { 
      state = &midi_player::polyphonic_key_pressure_value;
      return false;
    }
    bool polyphonic_key_pressure_value( uint8_t ) {
      state = &midi_player::polyphonic_key_pressure_key_number;
      return true;
    }
    bool control_change_key( uint8_t v ) {
      if( v == 1 )
        state = &midi_player::set_modulation;
      else if( v == 7 )
        state = &midi_player::set_volume;
      else if( v == 10 )
        state = &midi_player::set_pan;
      else if( v == 11 )
        state = &midi_player::set_expression;
      else if( v == 64 )
        state = &midi_player::set_dumper_pedal;
      else if( v == 121 )
        state = &midi_player::reset;
      else if( v == 123 )
        state = &midi_player::all_notes_off;
      else
        state = &midi_player::unknown_control;
      return false;
    }
    bool program_change( uint8_t v ) {
      programs[ channel ][ 0 ].first = c[ 0 ].first;
      programs[ channel ][ 1 ].first = c[ 1 ].first;
      programs[ channel ][ 2 ].first = c[ 2 ].first;
      programs[ channel ][ 3 ].first = c[ 3 ].first;
      programs[ channel ][ 0 ].second.reset( c[ 0 ].second.begin(), c[ 0 ].second.end() );
      programs[ channel ][ 1 ].second.reset( c[ 1 ].second.begin(), c[ 1 ].second.end() );
      programs[ channel ][ 2 ].second.reset( c[ 2 ].second.begin(), c[ 2 ].second.end() );
      programs[ channel ][ 3 ].second.reset( c[ 3 ].second.begin(), c[ 3 ].second.end() );
      state = &midi_player::program_change;
      return true;
    }
    bool channel_pressure( uint8_t v ) {
      //state = &midi_player::channel_pressure;
      return true;
    }
    bool pitch_bend_lower( uint8_t v ) {
      message_buffer[ 0 ] = v;
      state = &midi_player::pitch_bend_higher;
      return false;
    }
    bool pitch_bend_higher( uint8_t v ) {
      channels[ channel ].pitch_bend = ( ( ( int( v ) << 7 )|( int( message_buffer[ 0 ] ) ) ) - 8192 )/8191.f;
      channels[ channel ].final_pitch = channels[ channel ].pitch_bend * channels[ channel ].pitch_sensitivity;
      mapper.pitch_bend( channel );
      state = &midi_player::pitch_bend_lower;
      return true;
    }
    bool set_modulation( uint8_t v ) { // cc 1
      channels[ channel ].modulation = int( v )/127.f;
      state = &midi_player::control_change_key;
      return true;
    }
    bool set_volume( uint8_t v ) { // cc 7
      channels[ channel ].volume = int( v )/127.f;
      channels[ channel ].final_volume = channels[ channel ].volume * channels[ channel ].expression;
      state = &midi_player::control_change_key;
      return true;
    }
    bool set_pan( uint8_t v ) { // cc 10
      channels[ channel ].pan = ( int( v ) - 64 )/63.f;
      state = &midi_player::control_change_key;
      return true;
    }
    bool set_expression( uint8_t v ) { // cc 11
      channels[ channel ].expression = int( v )/127.f;
      channels[ channel ].final_volume = channels[ channel ].volume * channels[ channel ].expression;
      state = &midi_player::control_change_key;
      return true;
    }
    bool set_dumper_pedal( uint8_t v ) { // cc 64
      channels[ channel ].sustain = v >= 64;
      state = &midi_player::control_change_key;
      return true;
    }
    bool reset( uint8_t ) { // cc 121
      mapper.reset();
      std::for_each( channels.begin(), channels.end(), []( channel_state &channel ) { channel.reset(); } );
      for( auto &program: programs ) {
        program[ 0 ].first = c[ 0 ].first;
        program[ 1 ].first = c[ 1 ].first;
        program[ 2 ].first = c[ 2 ].first;
        program[ 3 ].first = c[ 3 ].first;
        program[ 0 ].second.reset( c[ 0 ].second.begin(), c[ 0 ].second.end() );
        program[ 1 ].second.reset( c[ 1 ].second.begin(), c[ 1 ].second.end() );
        program[ 2 ].second.reset( c[ 2 ].second.begin(), c[ 2 ].second.end() );
        program[ 3 ].second.reset( c[ 3 ].second.begin(), c[ 3 ].second.end() );
      }
      state = &midi_player::control_change_key;
      return true;
    }
    bool all_notes_off( uint8_t ) { // cc 123
      mapper.reset();
      state = &midi_player::control_change_key;
      return true;
    }
    bool unknown_control( uint8_t ) {
      state = &midi_player::control_change_key;
      return true;
    }
    bool new_event( uint8_t v ) {
      constexpr static const std::array< bool(midi_player::*)( uint8_t ), 8u > initial_states{{
        &tinyfm3::midi_player::note_off_key_number,
        &tinyfm3::midi_player::note_on_key_number,
        &tinyfm3::midi_player::polyphonic_key_pressure_key_number,
        &tinyfm3::midi_player::control_change_key,
        &tinyfm3::midi_player::program_change,
        &tinyfm3::midi_player::channel_pressure,
        &tinyfm3::midi_player::pitch_bend_lower,
        &tinyfm3::midi_player::waiting_for_event
      }};
      const uint8_t event = ( v >> 4 ) & 0x07;
      channel = v & 0x0F;
      state = initial_states[ event ];
      return false;
    }
    bool(midi_player::*state)( uint8_t );
    channel_t channel;
    unsigned int skip_length;
    std::array< channel_state, 16u > channels;
    std::array< std::array< std::pair< uint8_t, fm_config >, 4u >, 16u > programs;
    tinyfm3::note_mapper mapper;
    std::array< uint8_t, 16u > message_buffer;
  };
}

#endif


